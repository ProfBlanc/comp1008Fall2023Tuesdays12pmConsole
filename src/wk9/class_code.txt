// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Animal{
    
    private String name;
    private double weight;
    
    public void setName(String name){
        this.name = name;
    }
    public String getName(){
        return name;
    }
    public void setWeight(double weight){
        this.weight = weight;
    }
    public double getWeight(){
        return weight;
    }
    
    public String toString(){
        
        return String.format("Name=%s, Weight=%.1f%n", name, weight);
    }
    public String mystery(){
        return "Which animal am I?";
    }
}

class Cat extends Animal{
    
    private double anger;
    
    public String meow(){
        return "Meow, Meow!";
    }
    
    public void setAnger(double anger){
        this.anger = anger;
    }
    public double getAnger(){
        return anger;
    }
    
    public String mystery(){
        return "Hello Kitty";
    }
    
    //Anontation: needed? NO. Then why? Talks to compiler
    @Override
    public String toString(){
        
       /* return String.format("Name=%s, Weight=%.1f, Anger=%.1f%n",
        getName(), getWeight(), anger
        );
        */
        return super.toString().substring(0, super.toString().length() - 1) + ", Anger = " + anger;
    }
    
    public Cat(){}
    public Cat(String name, double weight, double anger){
        setName(name);
        setWeight(weight);
        this.anger = anger;
    }
    
}

class Lion extends Cat{
    
    String gender = "male";
    
    public Lion(){}
    
    @Override
    public void setWeight(double weight){
        if(weight < 100){
            throw new IllegalArgumentException("Weight is too small for a lion");
        }
        
    }
    
    public Lion(String gender){
        this.gender = gender;
    }
    public Lion(String gender, double anger, double weight, String name){
        super(name, weight, anger);
        
        this.gender = gender;
    }
    @Override
    public String toString(){
        return super.toString() + ", gender = " + gender;
    }
    
}

class Student{
    
    private String name ="Joe";
    private double grade;
    private int age;
    
    public int getAge(){
        return age;
    }
    public void setAge(int age){
        if(grade >= 0 && age <= 150){
            this.age = age;
            
        }
    }

    public double getGrade(){
        return grade;
    }
    public void setGrade(double grade){
        if(grade >= 0 && grade <= 100)
            this.grade = grade;
    }
    
    public String getName(){
        return name;
    }
    public void setName(String name){
        if(name.length() >= 3)
            this.name = name;
            
    }
    
    @Override
    public String toString(){
        return String.format("Name=%s, Age=%d, Grade=%.1f", name, age, grade);
    }
    
    public Student(){}
    public Student(String name, int age, double grade){
        setName(name);
        setAge(age);
        setGrade(grade);
    }
}

class HonorRollStudent extends Student{
    
    private String prizes = "";
    
    public void addPrize(String prize ){
        if(!prizes.contains(prize)){
            prizes += prize + "\t";
        }
    }
    public String getPrizes(){
        return prizes;
    }
    
    @Override
    public void setGrade(double grade){
        if(grade < 80)
        throw new IllegalArgumentException(grade + " is too low for Honor Roll Student");
        
        super.setGrade(grade);
        
    }
    
    @Override
    public String toString(){
        
        return super.toString() + ", prizes="+prizes;
    }
    
    public HonorRollStudent(){}
    public HonorRollStudent(String name, int age, double grade){
        super(name, age, grade);
    }
    
}

class MatureStudent extends Student{
    private String job = "";
    public void setJob(String job){
        this.job = job;
    }
    public String getJob(){
        return job;
    }
    @Override
    public void setAge(int age) {
        
        if(age < 30){
            throw new IllegalArgumentException("Need to be at least 30 years old");
        }
        
        super.setAge(age);
        
    }
    
    @Override
    public String toString(){
        return super.toString() + ", job=" + job;
    }
    
        public MatureStudent(){}
    public MatureStudent(String name, int age, double grade){
        super(name, age, grade);
    }

}

class HelloWorld {
    
    /*
        accessibility level
            private: 
        inherit
            all non-private entities
                * with exceptions
                
    Inhertiance: creating something NEW
    from something OLD (previously exists)
    
    
    OLD                     NEW
    
    base class              derived class
    parent class            child class
    super class             sub class      
    
all non-private entities from super class
are inherited in sub class
    exception: 
        constructors: only default 

overriding: create a new implementation
            old implementation N/A
                only for methods

overloading: variation
            dif param, data types


Iphone
    15
    SE    Regular     Pro       ProMax
    

every class has inheritance
    BASED on Object class
        toString
        default constructor
        equals(Object o)
        hashCode()

newer = more specific

Animal          Cat         Lion, Tiger, Panther, etc       

Single-class inheritance

    */
    
    public static void main(String[] args) {
       
       
        example2();
    }
    
    static void example2(){
        
        Student s = new Student("John", 18, 99.9);
        MatureStudent ms = new MatureStudent("Mary", 35, 100);
        HonorRollStudent hrs = new HonorRollStudent("Smart", 25, 100);
        
        System.out.println(s);
        System.out.println(ms);
        System.out.println(hrs);
        
    }
    static void example1(){
        
         System.out.println("Hello, World!");
        
        HelloWorld hw = new HelloWorld();
        System.out.println(hw);
        
        Cat c = new Cat();
        System.out.println(c.getWeight());
        c.setWeight(10);
        c.setName("Cat");
        System.out.println(c.getWeight());
        System.out.println(c);
        System.out.println(c.meow());

        Animal a1 = new Animal();
        Animal a2 = new Cat();
        //System.out.println(a.meow());
       // a.getAnger();
       System.out.println(a1.mystery());
       System.out.println(a2.mystery());
       
       //Cat c1 = new Animal();
       
       System.out.println( c instanceof Animal    );
       
       System.out.println( c );
       //String gender, double anger, double weight, String name
       Lion l = new Lion("female", 100, 150, "Nala");
       System.out.println(l);
    }
}
